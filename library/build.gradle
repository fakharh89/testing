apply plugin: 'com.android.library'
//apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode library_code
        versionName library_version
        buildConfigField 'String', 'VERSION_NAME', "\"$library_version\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.javaDirectories
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

group = 'com.github.AcousticStream.sulley'
version = "6.0.6"

ext {
    supportVersion = '1.1.0'
    junitVersion = '4.12'
    runnerVersion = '1.1.0-alpha4'
    espressoVersion = '3.1.0-alpha4'
    mockitoVersion = '3.4.6'
    sweetBlueVersion = '2.52.17'//'3.0.3'
    androidLoggerVersion = '1.0.7'
    rxJavaVersion = '2.2.14'
    rxAndroidVersion = '2.1.1'
    androidx_lib_version = '1.0.0'
    room_version = '2.4.0-alpha04'
}

dependencies {
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$supportVersion"
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:runner:$runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    //implementation "com.idevicesinc:sweetblue:$sweetBlueVersion"
    implementation "com.github.acousticstream:android-logger:$androidLoggerVersion"

    implementation 'io.reactivex.rxjava3:rxjava:3.0.0'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.legacy:legacy-support-v13:$androidx_lib_version"
}

if (android.productFlavors.size() > 0) {
    android.libraryVariants.all { variant ->

        if (variant.name.toLowerCase().contains("debug")) {
            return
        }

        def bundleTask = tasks["bundle${variant.name.capitalize()}Aar"]

        artifacts {
            archives(bundleTask.archivePath) {
                classifier variant.flavorName
                builtBy bundleTask
                name = project.name
            }
        }
    }
}